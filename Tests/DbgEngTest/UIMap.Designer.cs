// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace DbgEngTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfText uITypehelptogetstartedText1 = this.UICInteractiveWindowWindow.UITypehelptogetstartedText.UITypehelptogetstartedText1;
            #endregion

            // Verify that the 'ControlType' property of 'Type 'help' to get started :)' label equals 'Text'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITypehelptogetstartedText1ControlType, uITypehelptogetstartedText1.ControlType.ToString(), "Type 'help' to get started :)");
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinTitleBar uICInteractiveWindowTitleBar = this.UICInteractiveWindowWindow1.UICInteractiveWindowTitleBar;
            WpfCustom uIItemCustom = this.UICInteractiveWindowWindow.UIItemPane.UICText.UIItemCustom;
            WinWindow uICInteractiveWindowWindow1 = this.UICInteractiveWindowWindow1;
            #endregion

            WaitForReadyState();

            // Type '{#}dbg{Space}k{Enter}' in 'C# Interactive Window' window
            //Keyboard.SendKeys(uICInteractiveWindowWindow1, this.RecordedMethod1Params.UICInteractiveWindowWindow1SendKeys, ModifierKeys.None);

            //WaitForExecutionState();
            //WaitForReadyState();

            // Type 'var{Space}a{Space}={Space}new{Space}{[}{]}{Space}{RShiftKey}{{}' in 'C# Interactive Window' window
            Keyboard.SendKeys(uICInteractiveWindowWindow1, this.RecordedMethod1Params.UICInteractiveWindowWindow1SendKeys1, ModifierKeys.None);

            // Type 'Shift + {Space}' in 'C# Interactive Window' window
            Keyboard.SendKeys(uICInteractiveWindowWindow1, this.RecordedMethod1Params.UICInteractiveWindowWindow1SendKeys2, ModifierKeys.Shift);

            // Type '1,{Space}2,{Space}3,{Space}4,{Space}5,{Space}6,{Space}7,{Space}{RShiftKey}{}};{Enter}' in 'C# Interactive Window' window
            Keyboard.SendKeys(uICInteractiveWindowWindow1, this.RecordedMethod1Params.UICInteractiveWindowWindow1SendKeys3, ModifierKeys.None);

            WaitForExecutionState();
            WaitForReadyState();

            // Type 'writeln{RShiftKey}{(}a.{RShiftKey}Len{Enter}{RShiftKey}{)};{Enter}' in 'C# Interactive Window' window
            Keyboard.SendKeys(uICInteractiveWindowWindow1, this.RecordedMethod1Params.UICInteractiveWindowWindow1SendKeys4, ModifierKeys.None);

            WaitForExecutionState();
            WaitForReadyState();

            // Type 'writeln{RShiftKey}{(}a.{RShiftKey}Len{Enter}{RShiftKey}{)};{Enter}' in 'C# Interactive Window' window
            Keyboard.SendKeys(uICInteractiveWindowWindow1, "a{Enter}{Enter}", ModifierKeys.None);

            WaitForExecutionState();
            WaitForReadyState();

            // Type 'q{Enter}{Enter}' in 'C# Interactive Window' window
            Keyboard.SendKeys(uICInteractiveWindowWindow1, this.RecordedMethod1Params.UICInteractiveWindowWindow1SendKeys5, ModifierKeys.None);
        }

        private void WaitForReadyState()
        {
            WpfText uITypehelptogetstartedText1 = this.UICInteractiveWindowWindow.UITypehelptogetstartedText.UITypehelptogetstartedText1;

            uITypehelptogetstartedText1.WaitForControlCondition(c => c.GetProperty(WpfText.PropertyNames.Name).ToString() == "Type 'help' to get started :)", 5000);
        }

        private void WaitForExecutionState()
        {
            WpfText uITypehelptogetstartedText1 = this.UICInteractiveWindowWindow.UITypehelptogetstartedText.UITypehelptogetstartedText1;

            uITypehelptogetstartedText1.WaitForControlCondition(c => c.GetProperty(WpfText.PropertyNames.Name).ToString() == "Executing...", 500);
        }

        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UICInteractiveWindowWindow UICInteractiveWindowWindow
        {
            get
            {
                if ((this.mUICInteractiveWindowWindow == null))
                {
                    this.mUICInteractiveWindowWindow = new UICInteractiveWindowWindow();
                }
                return this.mUICInteractiveWindowWindow;
            }
        }
        
        public UICInteractiveWindowWindow1 UICInteractiveWindowWindow1
        {
            get
            {
                if ((this.mUICInteractiveWindowWindow1 == null))
                {
                    this.mUICInteractiveWindowWindow1 = new UICInteractiveWindowWindow1();
                }
                return this.mUICInteractiveWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UICInteractiveWindowWindow mUICInteractiveWindowWindow;
        
        private UICInteractiveWindowWindow1 mUICInteractiveWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Type 'help' to get started :)' label equals 'Text'
        /// </summary>
        public string UITypehelptogetstartedText1ControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{#}dbg{Space}k{Enter}' in 'C# Interactive Window' window
        /// </summary>
        public string UICInteractiveWindowWindow1SendKeys = "{#}dbg{Space}k{Enter}";

        /// <summary>
        /// Type 'var{Space}a{Space}={Space}new{Space}{[}{]}{Space}{RShiftKey}{{}' in 'C# Interactive Window' window
        /// </summary>
        public string UICInteractiveWindowWindow1SendKeys1 = "var{Space}a{Space}={Space}new{Space}{[}{]}{Space}{RShiftKey}{{}";
        
        /// <summary>
        /// Type 'Shift + {Space}' in 'C# Interactive Window' window
        /// </summary>
        public string UICInteractiveWindowWindow1SendKeys2 = "{Space}";

        /// <summary>
        /// Type '1,{Space}2,{Space}3,{Space}4,{Space}5,{Space}6,{Space}7,{Space}{RShiftKey}{}};{Enter}' in 'C# Interactive Window' window
        /// </summary>
        public string UICInteractiveWindowWindow1SendKeys3 = "1,{Space}2,{Space}3,{Space}4,{Space}5,{Space}6,{Space}7,{Space}{RShiftKey}{}};{Enter}";

        /// <summary>
        /// Type 'writeln{RShiftKey}{(}a.{RShiftKey}Len{Enter}{RShiftKey}{)};{Enter}q' in 'C# Interactive Window' window
        /// </summary>
        public string UICInteractiveWindowWindow1SendKeys4 = "writeln{RShiftKey}{(}a.{RShiftKey}Length{RShiftKey}{)};{Enter}";

        /// <summary>
        /// Type 'q{Enter}{Enter}' in 'C# Interactive Window' window
        /// </summary>
        public string UICInteractiveWindowWindow1SendKeys5 = "q{Enter}{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICInteractiveWindowWindow : WpfWindow
    {
        
        public UICInteractiveWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "C# Interactive Window";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C# Interactive Window");
            #endregion
        }
        
        #region Properties
        public UITypehelptogetstartedText UITypehelptogetstartedText
        {
            get
            {
                if ((this.mUITypehelptogetstartedText == null))
                {
                    this.mUITypehelptogetstartedText = new UITypehelptogetstartedText(this);
                }
                return this.mUITypehelptogetstartedText;
            }
        }
        
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private UITypehelptogetstartedText mUITypehelptogetstartedText;
        
        private UIItemPane mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITypehelptogetstartedText : WpfText
    {
        
        public UITypehelptogetstartedText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Type \'help\' to get started :)";
            this.WindowTitles.Add("C# Interactive Window");
            #endregion
        }
        
        #region Properties
        public WpfText UITypehelptogetstartedText1
        {
            get
            {
                if ((this.mUITypehelptogetstartedText1 == null))
                {
                    this.mUITypehelptogetstartedText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUITypehelptogetstartedText1.SearchProperties[WpfText.PropertyNames.Name] = "Type \'help\' to get started :)";
                    this.mUITypehelptogetstartedText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUITypehelptogetstartedText1.WindowTitles.Add("C# Interactive Window");
                    #endregion
                }
                return this.mUITypehelptogetstartedText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUITypehelptogetstartedText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemPane : WpfPane
    {
        
        public UIItemPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.WindowTitles.Add("C# Interactive Window");
            #endregion
        }
        
        #region Properties
        public UICText UICText
        {
            get
            {
                if ((this.mUICText == null))
                {
                    this.mUICText = new UICText(this);
                }
                return this.mUICText;
            }
        }
        #endregion
        
        #region Fields
        private UICText mUICText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICText : WpfText
    {
        
        public UICText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "C#> ";
            this.WindowTitles.Add("C# Interactive Window");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mUIItemCustom.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemCustom.WindowTitles.Add("C# Interactive Window");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICInteractiveWindowWindow1 : WinWindow
    {
        
        public UICInteractiveWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C# Interactive Window";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C# Interactive Window");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UICInteractiveWindowTitleBar
        {
            get
            {
                if ((this.mUICInteractiveWindowTitleBar == null))
                {
                    this.mUICInteractiveWindowTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICInteractiveWindowTitleBar.WindowTitles.Add("C# Interactive Window");
                    #endregion
                }
                return this.mUICInteractiveWindowTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUICInteractiveWindowTitleBar;
        #endregion
    }
}
